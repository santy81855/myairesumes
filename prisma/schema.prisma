// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id                 String                   @id @unique @default(cuid())
    firstName          String?
    lastName           String?
    email              String                   @unique
    accountType        String                   @default("password")
    hashedPassword     String?
    emailVerified      Boolean                  @default(false)
    stripeCustomerId   String?                  @unique
    status             String                   @default("free") // options are free and pro
    basicInfo          Json?
    numberJobs         Int                      @default(0)
    numberResumes      Int                      @default(0)
    numberCoverLetters Int                      @default(0)
    imageUrl           String                   @default("")
    numImageUploads    Int                      @default(0)
    authSession        Session[]
    emailToken         EmailVerificationToken[]
    emailCode          EmailVerificationCode[]
    passwordToken      PasswordResetToken[]
    subscription       Subscription?
    resume             Resume[]
    coverLetter        CoverLetter[]
}

model Session {
    id        String   @id @unique @default(cuid())
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model EmailVerificationToken {
    id        String   @id @unique @default(cuid())
    userId    String   @unique
    email     String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model EmailVerificationCode {
    id        String   @id @unique @default(cuid())
    code      String
    userId    String   @unique
    email     String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model PasswordResetToken {
    id        String   @id @unique @default(cuid())
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model Subscription {
    stripeSubscriptionId String   @id @unique
    interval             String
    status               String
    planId               String
    currentPeriodStart   Int
    currentPeriodEnd     Int
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    user                 User     @relation(fields: [userId], references: [id])
    userId               String   @unique
}

model Resume {
    id          String   @id @unique @default(cuid())
    userId      String
    information Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

model CoverLetter {
    id          String   @id @unique @default(cuid())
    userId      String
    information Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}
